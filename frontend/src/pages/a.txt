"use client"

import { useDispatch, useSelector } from "react-redux"
import { useEffect, useState, useMemo, useRef } from "react"
import { allProblemsFetch, logoutUser, getUserImage } from "../authSlice"
import axiosClient from "../utils/axiosClient"
import { NavLink, Link } from "react-router-dom"
import {
  Search,
  Shuffle,
  Filter,
  X,
  Sun,
  Moon,
  ChevronDown,
  BarChart3,
  CheckSquare,
  Code,
  User,
  Shield,
  Zap,
  LogOut,
  Bookmark,
  Flame,
  Plus,
  ChevronLeft,
  ChevronRight,
  Star,
  Trophy,
  CheckCircle,
  Calendar,
  Target,
  Sparkles,
  Clock,
  Eye,
  TrendingUp,
  Check,
  Trash2,
  MoreVertical,
  AlertTriangle,
} from "lucide-react"

// Enhanced Circuit Board Background (unchanged)
const CircuitBoardBackground = () => {
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 })

  useEffect(() => {
    let animationFrameId = null
    const handleMouseMove = (e) => {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId)
      }
      animationFrameId = requestAnimationFrame(() => {
        setMousePos({ x: e.clientX, y: e.clientY + window.scrollY })
        document.documentElement.style.setProperty("--mouse-x", `${e.clientX}px`)
        document.documentElement.style.setProperty("--mouse-y", `${e.clientY + window.scrollY}px`)
      })
    }
    window.addEventListener("mousemove", handleMouseMove)
    return () => {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId)
      }
      window.removeEventListener("mousemove", handleMouseMove)
    }
  }, [])

  return (
    <div className="fixed inset-0 -z-10 h-full w-full overflow-hidden bg-white dark:bg-black">
      <div className="absolute inset-0 opacity-[0.02] dark:opacity-[0.05]">
        <div
          className="h-full w-full"
          style={{
            backgroundImage: `
              linear-gradient(to right, #000 1px, transparent 1px),
              linear-gradient(to bottom, #000 1px, transparent 1px)
            `,
            backgroundSize: "40px 40px",
          }}
        />
      </div>
      <div className="absolute inset-0 overflow-hidden opacity-[0.03] dark:opacity-[0.08]">
        {Array.from({ length: 15 }).map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-black dark:bg-white rounded-full animate-pulse"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${2 + Math.random() * 2}s`,
            }}
          />
        ))}
      </div>
      <div
        className="absolute inset-0 transition-opacity duration-300"
        style={{
          backgroundImage: `
            radial-gradient(400px circle at var(--mouse-x) var(--mouse-y), rgba(156, 163, 175, 0.08), transparent 50%),
            radial-gradient(600px circle at var(--mouse-x) var(--mouse-y), rgba(107, 114, 128, 0.04), transparent 70%)
          `,
        }}
      />
    </div>
  )
}

// Welcome Animation Component (unchanged)
const WelcomeAnimation = ({ user, onComplete }) => {
  const [isVisible, setIsVisible] = useState(true)

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false)
      setTimeout(onComplete, 500)
    }, 3000)

    return () => clearTimeout(timer)
  }, [onComplete])

  if (!isVisible) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-white/95 dark:bg-black/95 backdrop-blur-xl">
      <div className="text-center space-y-6 animate-pulse">
        <div className="w-24 h-24 mx-auto rounded-full bg-white dark:bg-black border-4 border-black dark:border-white flex items-center justify-center shadow-2xl animate-bounce">
          <Sparkles className="w-12 h-12 text-yellow-500" />
        </div>
        <div className="space-y-2">
          <h1 className="text-4xl font-black text-black dark:text-white animate-fade-in">
            Welcome to CodeArena, {user?.firstName}!
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 animate-fade-in-delay">
            Ready to start your coding journey?
          </p>
        </div>
        <div className="flex justify-center space-x-2">
          <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
        </div>
      </div>
    </div>
  )
}

// All Modal components (CreateBookmarkListModal, DeleteListModal, ManageProblemsModal, etc.) are unchanged

const CreateBookmarkListModal = ({ isOpen, onClose, onListCreated }) => {
  const [newListName, setNewListName] = useState("")
  const [creating, setCreating] = useState(false)

  const createNewList = async () => {
    if (!newListName.trim()) return

    setCreating(true)
    try {
      const response = await axiosClient.post("/bookmarks/createBookmarkList", {
        name: newListName.trim(),
        problemIds: [],
      })

      if (response.data) {
        onListCreated?.(response.data)
        setNewListName("")
        onClose()
      }
    } catch (error) {
      console.error("Error creating bookmark list:", error)
    } finally {
      setCreating(false)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-6 max-w-md w-full mx-4">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-black text-black dark:text-white flex items-center gap-2">
            <Plus className="h-5 w-5 text-blue-500" />
            Create New List
          </h2>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
          >
            <X className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
          </button>
        </div>

        <div className="space-y-4">
          <input
            type="text"
            placeholder="Enter list name..."
            value={newListName}
            onChange={(e) => setNewListName(e.target.value)}
            className="w-full px-3 py-2 rounded-xl bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 text-black dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 focus:border-blue-500 dark:focus:border-blue-400 transition-all duration-300"
            onKeyPress={(e) => e.key === "Enter" && createNewList()}
          />
          <div className="flex gap-2">
            <button
              onClick={createNewList}
              disabled={!newListName.trim() || creating}
              className="flex-1 bg-black dark:bg-white text-white dark:text-black py-2 rounded-xl font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {creating ? (
                <div className="w-4 h-4 border-2 border-white dark:border-black border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <Check className="h-4 w-4" />
              )}
              Create List
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 rounded-xl border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-300"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

const DeleteListModal = ({ isOpen, onClose, list, onListDeleted }) => {
  const [deleting, setDeleting] = useState(false)

  const deleteList = async () => {
    if (!list?._id) return

    setDeleting(true)
    try {
      await axiosClient.delete(`/bookmarks/deleteList/${list._id}`)
      onListDeleted?.(list._id)
      onClose()
    } catch (error) {
      console.error("Error deleting bookmark list:", error)
    } finally {
      setDeleting(false)
    }
  }

  if (!isOpen || !list) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-6 max-w-md w-full mx-4">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-black text-black dark:text-white flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-red-500" />
            Delete List
          </h2>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
          >
            <X className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
          </button>
        </div>

        <div className="space-y-4">
          <p className="text-gray-600 dark:text-gray-400">
            Are you sure you want to delete the list <strong>"{list.name}"</strong>? This action cannot be undone.
          </p>
          <div className="flex gap-2">
            <button
              onClick={deleteList}
              disabled={deleting}
              className="flex-1 bg-red-600 text-white py-2 rounded-xl font-bold hover:bg-red-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {deleting ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <Trash2 className="h-4 w-4" />
              )}
              Delete List
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 rounded-xl border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-300"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

const ManageProblemsModal = ({ isOpen, onClose, list, onProblemsUpdated }) => {
  const [problems, setProblems] = useState([])
  const [loading, setLoading] = useState(false)
  const [removing, setRemoving] = useState(null)

  useEffect(() => {
    if (isOpen && list?.problemIds?.length > 0) {
      fetchProblems()
    } else if (isOpen) {
      setProblems([])
    }
  }, [isOpen, list])

  const fetchProblems = async () => {
    setLoading(true)
    try {
      const response = await axiosClient.post("/bookmarks/getBookmarkProblems", {
        problemIds: list.problemIds,
      })
      setProblems(response.data || [])
    } catch (error) {
      console.error("Error fetching problems:", error)
      setProblems([])
    } finally {
      setLoading(false)
    }
  }

  const removeProblem = async (problemId) => {
    setRemoving(problemId)
    try {
      await axiosClient.post("/bookmarks/removeProblemFromList", {
        listId: list._id,
        problemId: problemId,
      })
      setProblems(problems.filter((p) => p._id !== problemId))
      onProblemsUpdated?.()
    } catch (error) {
      console.error("Error removing problem from list:", error)
    } finally {
      setRemoving(null)
    }
  }

  const getDifficultyStyles = (difficulty) => {
    switch (difficulty?.toLowerCase()) {
      case "easy":
        return "text-green-800 dark:text-green-300 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800"
      case "medium":
        return "text-yellow-800 dark:text-yellow-300 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800"
      case "hard":
        return "text-red-800 dark:text-red-300 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800"
      default:
        return "text-gray-800 dark:text-gray-300 bg-gray-50 dark:bg-gray-900/20 border border-gray-200 dark:border-gray-800"
    }
  }

  if (!isOpen || !list) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-black text-black dark:text-white flex items-center gap-2">
            <Bookmark className="h-5 w-5 text-blue-500" />
            Manage Problems - {list.name}
          </h2>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
          >
            <X className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
          </button>
        </div>

        {loading ? (
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-16 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse"></div>
            ))}
          </div>
        ) : problems.length > 0 ? (
          <div className="space-y-3">
            {problems.map((problem) => (
              <div
                key={problem._id}
                className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-700"
              >
                <div className="flex-1">
                  <h3 className="font-bold text-black dark:text-white mb-2">{problem.title}</h3>
                  <div className="flex items-center gap-2">
                    <span
                      className={`px-2 py-1 rounded-lg text-xs font-bold ${getDifficultyStyles(problem.difficulty)}`}
                    >
                      {problem.difficulty}
                    </span>
                    <span className="px-2 py-1 rounded-lg text-xs font-bold text-blue-800 dark:text-blue-300 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                      {problem.tags}
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <NavLink
                    to={`/problem/${problem._id}`}
                    className="px-3 py-1 rounded-lg bg-black dark:bg-white text-white dark:text-black text-xs font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors duration-200"
                  >
                    Solve
                  </NavLink>
                  <button
                    onClick={() => removeProblem(problem._id)}
                    disabled={removing === problem._id}
                    className="p-2 rounded-lg bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40 transition-all duration-300 disabled:opacity-50"
                  >
                    {removing === problem._id ? (
                      <div className="w-4 h-4 border-2 border-red-500 border-t-transparent rounded-full animate-spin"></div>
                    ) : (
                      <Trash2 className="h-4 w-4" />
                    )}
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <Bookmark className="h-8 w-8 text-gray-400 mx-auto mb-2" />
            <p className="text-gray-500 dark:text-gray-400 text-sm">No problems in this list</p>
          </div>
        )}
      </div>
    </div>
  )
}

const ViewListProblemsModal = ({ isOpen, onClose, list }) => {
  const [problems, setProblems] = useState([])
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (isOpen && list?.problemIds?.length > 0) {
      fetchProblems()
    } else if (isOpen) {
      setProblems([])
    }
  }, [isOpen, list])

  const fetchProblems = async () => {
    setLoading(true)
    try {
      const response = await axiosClient.post("/bookmarks/getBookmarkProblems", {
        problemIds: list.problemIds,
      })
      setProblems(response.data || [])
    } catch (error) {
      console.error("Error fetching problems:", error)
      setProblems([])
    } finally {
      setLoading(false)
    }
  }

  const getDifficultyStyles = (difficulty) => {
    switch (difficulty?.toLowerCase()) {
      case "easy":
        return "text-green-800 dark:text-green-300 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800"
      case "medium":
        return "text-yellow-800 dark:text-yellow-300 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800"
      case "hard":
        return "text-red-800 dark:text-red-300 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800"
      default:
        return "text-gray-800 dark:text-gray-300 bg-gray-50 dark:bg-gray-900/20 border border-gray-200 dark:border-gray-800"
    }
  }

  if (!isOpen || !list) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-black text-black dark:text-white flex items-center gap-2">
            <Bookmark className="h-5 w-5 text-blue-500" />
            {list.name} ({problems.length} problems)
          </h2>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
          >
            <X className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
          </button>
        </div>

        {loading ? (
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-16 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse"></div>
            ))}
          </div>
        ) : problems.length > 0 ? (
          <div className="space-y-3">
            {problems.map((problem, index) => (
              <NavLink
                key={problem._id}
                to={`/problem/${problem._id}`}
                className="block p-4 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 transition-all duration-200"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <span className="w-6 h-6 rounded-lg bg-white dark:bg-black border border-gray-200 dark:border-gray-700 flex items-center justify-center text-xs font-black text-black dark:text-white">
                      {index + 1}
                    </span>
                    <div>
                      <h3 className="font-bold text-black dark:text-white mb-1">{problem.title}</h3>
                      <div className="flex items-center gap-2">
                        <span
                          className={`px-2 py-1 rounded-lg text-xs font-bold ${getDifficultyStyles(problem.difficulty)}`}
                        >
                          {problem.difficulty}
                        </span>
                        <span className="px-2 py-1 rounded-lg text-xs font-bold text-blue-800 dark:text-blue-300 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                          {problem.tags}
                        </span>
                      </div>
                    </div>
                  </div>
                  <ChevronRight className="h-4 w-4 text-gray-400" />
                </div>
              </NavLink>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <Bookmark className="h-8 w-8 text-gray-400 mx-auto mb-2" />
            <p className="text-gray-500 dark:text-gray-400 text-sm">No problems in this list</p>
          </div>
        )}
      </div>
    </div>
  )
}

const BookmarkModal = ({ isOpen, onClose, problem, onBookmarkAdded }) => {
  const [bookmarkLists, setBookmarkLists] = useState([])
  const [loading, setLoading] = useState(false)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [newListName, setNewListName] = useState("")
  const [creating, setCreating] = useState(false)
  const [adding, setAdding] = useState(false)

  useEffect(() => {
    if (isOpen) {
      fetchBookmarkLists()
    }
  }, [isOpen])

  const fetchBookmarkLists = async () => {
    setLoading(true)
    try {
      const response = await axiosClient.get("/bookmarks/getUserBookmarks")
      setBookmarkLists(response.data || [])
    } catch (error) {
      console.error("Error fetching bookmark lists:", error)
      setBookmarkLists([])
    } finally {
      setLoading(false)
    }
  }

  const createNewList = async () => {
    if (!newListName.trim()) return

    setCreating(true)
    try {
      const response = await axiosClient.post("/bookmarks/createBookmarkList", {
        name: newListName.trim(),
        problemIds: [problem._id],
      })

      if (response.data) {
        setBookmarkLists([...bookmarkLists, response.data])
        setNewListName("")
        setShowCreateForm(false)
        onBookmarkAdded?.()
        onClose()
      }
    } catch (error) {
      console.error("Error creating bookmark list:", error)
    } finally {
      setCreating(false)
    }
  }

  const addToExistingList = async (listId) => {
    setAdding(true)
    try {
      await axiosClient.post("/bookmarks/addProblemToList", {
        listId,
        problemId: problem._id,
      })
      onBookmarkAdded?.()
      onClose()
    } catch (error) {
      console.error("Error adding problem to list:", error)
    } finally {
      setAdding(false)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-6 max-w-md w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-black text-black dark:text-white flex items-center gap-2">
            <Bookmark className="h-5 w-5 text-blue-500" />
            Add to Bookmark
          </h2>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
          >
            <X className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
          </button>
        </div>

        <div className="mb-4 p-3 bg-gray-50 dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-700">
          <h3 className="font-bold text-black dark:text-white text-sm mb-1">{problem?.title}</h3>
          <p className="text-xs text-gray-600 dark:text-gray-400">
            {problem?.difficulty} • {problem?.tags}
          </p>
        </div>

        {loading ? (
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-12 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse"></div>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-bold text-black dark:text-white mb-3">Select a list:</h3>
              <div className="space-y-2 max-h-48 overflow-y-auto">
                {bookmarkLists.length > 0 ? (
                  bookmarkLists.map((list) => (
                    <button
                      key={list._id}
                      onClick={() => addToExistingList(list._id)}
                      disabled={adding}
                      className="w-full flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 transition-all duration-200 disabled:opacity-50"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-lg bg-white dark:bg-black border border-gray-200 dark:border-gray-700 flex items-center justify-center">
                          <Bookmark className="h-4 w-4 text-blue-500" />
                        </div>
                        <div className="text-left">
                          <h4 className="font-bold text-black dark:text-white text-sm">{list.name}</h4>
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            {list.problemIds?.length || 0} problems
                          </p>
                        </div>
                      </div>
                      {adding ? (
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                      ) : (
                        <Plus className="h-4 w-4 text-gray-400" />
                      )}
                    </button>
                  ))
                ) : (
                  <p className="text-center text-gray-500 dark:text-gray-400 text-sm py-4">No bookmark lists yet</p>
                )}
              </div>
            </div>

            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
              {!showCreateForm ? (
                <button
                  onClick={() => setShowCreateForm(true)}
                  className="w-full flex items-center justify-center gap-2 p-3 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl hover:border-blue-500 dark:hover:border-blue-400 hover:bg-gray-50 dark:hover:bg-gray-900 transition-all duration-200 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                >
                  <Plus className="h-4 w-4" />
                  <span className="font-medium">Create New List</span>
                </button>
              ) : (
                <div className="space-y-3">
                  <input
                    type="text"
                    placeholder="Enter list name..."
                    value={newListName}
                    onChange={(e) => setNewListName(e.target.value)}
                    className="w-full px-3 py-2 rounded-xl bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 text-black dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 focus:border-blue-500 dark:focus:border-blue-400 transition-all duration-300"
                    onKeyPress={(e) => e.key === "Enter" && createNewList()}
                  />
                  <div className="flex gap-2">
                    <button
                      onClick={createNewList}
                      disabled={!newListName.trim() || creating}
                      className="flex-1 bg-black dark:bg-white text-white dark:text-black py-2 rounded-xl font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                    >
                      {creating ? (
                        <div className="w-4 h-4 border-2 border-white dark:border-black border-t-transparent rounded-full animate-spin"></div>
                      ) : (
                        <Check className="h-4 w-4" />
                      )}
                      Create & Add
                    </button>
                    <button
                      onClick={() => {
                        setShowCreateForm(false)
                        setNewListName("")
                      }}
                      className="px-4 py-2 rounded-xl border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-300"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

// All other components (TopicFilters, ProblemCard, etc.) are unchanged

const AllTopicsIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
      <path d="M1 3.5A1.5 1.5 0 0 1 2.5 2h11A1.5 1.5 0 0 1 15 3.5v1.944a2 2 0 0 1-2 1.944H3a2 2 0 0 1-2-1.944V3.5zM2.5 3a.5.5 0 0 0-.5.5v1.944a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V3.5a.5.5 0 0 0-.5-.5h-11z" />
      <path d="M14 8a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h12zM2 9v3h12V9H2z" />
    </svg>
)
  
const ArrayIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="14"
      height="14"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      style={{ color: "#FFB800" }}
    >
      <path d="M14.5 17.5L19 22l-5-5m-5-5L5 8l4.5 4.5M8 22l14-14" />
    </svg>
)
  
const LinkedListIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="14"
      height="14"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      style={{ color: "#4A90E2" }}
    >
      <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.72" />
      <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.72" />
    </svg>
)
  
const GraphIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="14"
      height="14"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      style={{ color: "#00C853" }}
    >
      <path d="M18 8a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z" />
      <path d="M12 14v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h4" />
      <path d="M12 10V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4" />
    </svg>
)
  
const DPIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="14"
      height="14"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      style={{ color: "#9063F2" }}
    >
      <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" />
      <polyline points="3.27 6.96 12 12.01 20.73 6.96" />
      <line x1="12" y1="22.08" x2="12" y2="12" />
    </svg>
)

const TopicFilters = ({ activeFilter, onFilterChange }) => {
    const topics = [
      { name: "All Topics", value: "all", icon: <AllTopicsIcon /> },
      { name: "Array", value: "array", icon: <ArrayIcon /> },
      { name: "Linked List", value: "linkedList", icon: <LinkedListIcon /> },
      { name: "Graph", value: "graph", icon: <GraphIcon /> },
      { name: "DP", value: "dp", icon: <DPIcon /> },
    ]
  
    return (
      <div className="relative mb-6">
        <div className="flex space-x-2 overflow-x-auto pb-3 scrollbar-hide">
          {topics.map((topic) => {
            const isActive = activeFilter === topic.value
            return (
              <button
                key={topic.value}
                onClick={() => onFilterChange(topic.value)}
                className={`flex-shrink-0 flex items-center gap-2 px-4 py-2.5 rounded-xl text-sm font-bold transition-all duration-300 hover:scale-105 ${
                  isActive
                    ? "bg-black dark:bg-white text-white dark:text-black shadow-lg"
                    : "bg-white dark:bg-black text-black dark:text-white hover:bg-gray-50 dark:hover:bg-gray-900 border border-gray-200 dark:border-gray-700"
                }`}
              >
                {topic.icon}
                <span>{topic.name}</span>
              </button>
            )
          })}
        </div>
      </div>
    )
}
  
const ProblemCard = ({ problem, isSolved, index, onBookmarkClick }) => {
    const [isHovered, setIsHovered] = useState(false)
    const [isMounted, setIsMounted] = useState(false)
    const [showPreview, setShowPreview] = useState(false)
  
    const getDifficultyStyles = (difficulty) => {
      switch (difficulty?.toLowerCase()) {
        case "easy":
          return "text-green-800 dark:text-green-300 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800"
        case "medium":
          return "text-yellow-800 dark:text-yellow-300 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800"
        case "hard":
          return "text-red-800 dark:text-red-300 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800"
        default:
          return "text-gray-800 dark:text-gray-300 bg-gray-50 dark:bg-gray-900/20 border border-gray-200 dark:border-gray-800"
      }
    }
  
    useEffect(() => {
      const timer = setTimeout(() => setIsMounted(true), 50 * index)
      return () => clearTimeout(timer)
    }, [index])
  
    const problemDescription =
      problem.description ||
      `This is a ${problem.difficulty} level problem focusing on ${problem.tags}. Click to view the full problem statement and start solving!`
  
    return (
      <div
        className={`group w-full transition-all duration-300 ease-out hover:-translate-y-1 ${
          isMounted ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
        }`}
        onMouseEnter={() => {
          setIsHovered(true)
          setTimeout(() => setShowPreview(true), 300)
        }}
        onMouseLeave={() => {
          setIsHovered(false)
          setShowPreview(false)
        }}
      >
        <div className="relative p-4 rounded-xl bg-white dark:bg-black backdrop-blur-sm border border-white dark:border-neutral-400  shadow-md hover:shadow-xl transition-all duration-300 group-hover:bg-gray-50 dark:group-hover:bg-gray-900">
          <div className="flex items-center justify-between gap-3">
            <div className="flex items-center gap-3 flex-1">
              <span className="flex-shrink-0 w-8 h-8 rounded-xl bg-white dark:bg-black border border-gray-200 dark:border-gray-700 flex items-center justify-center text-sm font-black text-black dark:text-white shadow-lg">
                {index + 1}
              </span>
              <div className="flex flex-col gap-2 flex-1">
                <NavLink to={`/problem/${problem._id}`} className="focus:outline-none group">
                  <h2 className="text-sm font-bold text-black dark:text-white group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors duration-200">
                    {problem.title}
                  </h2>
                </NavLink>
                <div className="flex flex-wrap items-center gap-2">
                  <div
                    className={`inline-flex items-center rounded-lg px-3 py-1 text-xs font-bold ${getDifficultyStyles(problem.difficulty)}`}
                  >
                    {problem.difficulty}
                  </div>
                  <div className="inline-flex items-center rounded-lg px-3 py-1 text-xs font-bold text-blue-800 dark:text-blue-300 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                    {problem.tags}
                  </div>
                  <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
                    <span className="flex items-center gap-1">
                      <Eye className="w-3 h-3 text-blue-500" />
                      {Math.floor(Math.random() * 1000) + 100}
                    </span>
                    <span className="flex items-center gap-1">
                      <TrendingUp className="w-3 h-3 text-green-500" />
                      {Math.floor(Math.random() * 80) + 20}%
                    </span>
                    <span className="flex items-center gap-1">
                      <Clock className="w-3 h-3 text-orange-500" />~{Math.floor(Math.random() * 45) + 15}m
                    </span>
                  </div>
                </div>
              </div>
            </div>
  
            <div className="flex items-center gap-2">
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  onBookmarkClick(problem)
                }}
                className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 group/bookmark"
                title="Add to bookmark"
              >
                <Bookmark className="w-4 h-4 text-blue-500 group-hover/bookmark:fill-current" />
              </button>
  
              {isSolved && (
                <div className="flex-shrink-0 flex items-center justify-center h-10 w-10 rounded-xl bg-white dark:bg-black border-2 border-green-500 relative shadow-lg">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <div className="absolute inset-0 rounded-xl bg-green-400/20 animate-ping"></div>
                </div>
              )}
            </div>
          </div>
  
          {showPreview && isHovered && (
            <div className="mt-4 p-4 rounded-xl bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 animate-fade-in">
              <h4 className="font-bold text-black dark:text-white mb-2 text-sm">Quick Preview</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-3 leading-relaxed">
                {problemDescription}
              </p>
              <div className="flex items-center justify-between mt-3">
                <div className="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
                  <span>Acceptance Rate: {Math.floor(Math.random() * 80) + 20}%</span>
                  <span>Submissions: {Math.floor(Math.random() * 5000) + 1000}</span>
                </div>
                <NavLink
                  to={`/problem/${problem._id}`}
                  className="px-3 py-1 rounded-lg bg-black dark:bg-white text-white dark:text-black text-xs font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors duration-200"
                >
                  Solve Now
                </NavLink>
              </div>
            </div>
          )}
        </div>
      </div>
    )
}
  
const StreakCalendar = ({ userStreak, loading = false }) => {
    const [currentMonth, setCurrentMonth] = useState(new Date())
  
    const getDaysInMonth = (date) => {
      const year = date.getFullYear()
      const month = date.getMonth()
      const firstDay = new Date(year, month, 1)
      const lastDay = new Date(year, month + 1, 0)
      const daysInMonth = lastDay.getDate()
      const startingDayOfWeek = firstDay.getDay()
  
      return { daysInMonth, startingDayOfWeek }
    }
  
    const { daysInMonth, startingDayOfWeek } = getDaysInMonth(currentMonth)
    const solvedDates = userStreak?.solvedDates || []
    const solvedDateStrings = solvedDates.map((date) => new Date(date).toISOString().split("T")[0])
  
    const isDateSolved = (day) => {
      const dateString = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day).toISOString().split("T")[0]
      return solvedDateStrings.includes(dateString)
    }
  
    const navigateMonth = (direction) => {
      setCurrentMonth((prev) => {
        const newDate = new Date(prev)
        newDate.setMonth(prev.getMonth() + direction)
        return newDate
      })
    }
  
    if (loading) {
      return (
        <div className="bg-white dark:bg-black rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg p-6">
          <div className="animate-pulse">
            <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-32 mb-4"></div>
            <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
          </div>
        </div>
      )
    }
  
    return (
      <div className="bg-white w-90 dark:bg-black rounded-xl border border-black dark:border-white shadow-lg hover:shadow-xl transition-all duration-300 p-6 group hover:-translate-y-1">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-black text-black dark:text-white flex items-center gap-2">
            <Calendar className="h-5 w-5 text-green-500" />
            Streak Calendar
          </h3>
          <div className="flex items-center gap-2">
            <button
              onClick={() => navigateMonth(-1)}
              className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
            >
              <ChevronLeft className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
            </button>
            <span className="text-sm font-bold text-black dark:text-white min-w-[120px] text-center">
              {currentMonth.toLocaleDateString("en", { month: "long", year: "numeric" })}
            </span>
            <button
              onClick={() => navigateMonth(1)}
              className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
            >
              <ChevronRight className="h-4 w-4 text-gray-500 hover:text-black dark:hover:text-white" />
            </button>
          </div>
        </div>
  
        <div className="grid grid-cols-7 gap-1 mb-2">
          {["S", "M", "T", "W", "T", "F", "S"].map((day, index) => (
            <div key={index} className="text-xs text-gray-400 text-center p-1 font-bold">
              {day}
            </div>
          ))}
        </div>
  
        <div className="grid grid-cols-7 gap-2">
          {Array.from({ length: startingDayOfWeek }).map((_, index) => (
            <div key={`empty-${index}`} className="w-8 h-8"></div>
          ))}
  
          {Array.from({ length: daysInMonth }).map((_, index) => {
            const day = index + 1
            const isSolved = isDateSolved(day)
            const isToday =
              new Date().toDateString() ===
              new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day).toDateString()
  
            return (
              <div
                key={day}
                className={`w-8 h-8 rounded-lg flex items-center justify-center text-xs font-bold transition-all duration-200 hover:scale-110 cursor-pointer ${
                  isToday ? "ring-2 ring-black dark:ring-white" : ""
                } ${
                  isSolved
                    ? "bg-green-500 text-white shadow-lg"
                    : "bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700"
                }`}
                title={`${day} ${currentMonth.toLocaleDateString("en", { month: "long" })}: ${isSolved ? "Active" : "Inactive"}`}
              >
                {day}
              </div>
            )
          })}
        </div>
  
        <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
          <div className="flex items-center gap-2 text-sm">
            <Flame className="h-4 w-4 text-red-500" />
            <span className="text-gray-500 dark:text-gray-400">Current:</span>
            <span className="font-black text-black dark:text-white">{userStreak?.currentStreak || 0}</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Trophy className="h-4 w-4 text-yellow-500" />
            <span className="text-gray-500 dark:text-gray-400">Best:</span>
            <span className="font-black text-black dark:text-white">{userStreak?.maxStreak || 0}</span>
          </div>
        </div>
      </div>
    )
}
  
const ProblemOfTheDay = ({ problem, loading = false }) => {
    if (loading) {
      return (
        <div className="bg-white dark:bg-black rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg p-6">
          <div className="animate-pulse">
            <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-40 mb-4"></div>
            <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
          </div>
        </div>
      )
    }
  
    if (!problem) {
      return (
        <div className="bg-white dark:bg-black rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg p-6 group hover:-translate-y-1 transition-all duration-300">
          <h3 className="text-lg font-black text-black dark:text-white mb-4 flex items-center gap-2">
            <Star className="h-5 w-5 text-yellow-500" />
            Problem of the Day
          </h3>
          <p className="text-gray-500 dark:text-gray-400">No problem available today</p>
        </div>
      )
    }
  
    const getDifficultyColor = (difficulty) => {
      switch (difficulty?.toLowerCase()) {
        case "easy":
          return "text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
        case "medium":
          return "text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800"
        case "hard":
          return "text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800"
        default:
          return "text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20 border-gray-200 dark:border-gray-800"
      }
    }
  
    return (
      <NavLink
        to={`/problem/${problem._id}`}
        className="block bg-white dark:bg-black rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-300 p-6 group hover:-translate-y-1"
      >
        <h3 className="text-lg font-black text-black dark:text-white mb-4 flex items-center gap-2">
          <Star className="h-5 w-5 text-yellow-500" />
          Problem of the Day
        </h3>
  
        <div className="space-y-4">
          <div className="hover:bg-gray-50 dark:hover:bg-gray-900 rounded-xl p-4 transition-all duration-200 border border-gray-200 dark:border-gray-700">
            <h4 className="font-bold text-black dark:text-white mb-3">{problem.title}</h4>
            <div className="flex items-center gap-2">
              <span className={`px-3 py-1 rounded-lg text-xs font-bold border ${getDifficultyColor(problem.difficulty)}`}>
                {problem.difficulty}
              </span>
              <span className="px-3 py-1 rounded-lg text-xs font-bold text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                {problem.tags}
              </span>
            </div>
          </div>
  
          <div className="w-full bg-black dark:bg-white text-white dark:text-black py-3 rounded-xl font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 shadow-lg text-center">
            Solve Now
          </div>
        </div>
      </NavLink>
    )
}
  
const BookmarkLists = ({ bookmarks, loading = false, onBookmarkSelect, selectedBookmark, onBookmarksUpdated }) => {
    const [showCreateModal, setShowCreateModal] = useState(false)
    const [showDeleteModal, setShowDeleteModal] = useState(false)
    const [showManageModal, setShowManageModal] = useState(false)
    const [showViewModal, setShowViewModal] = useState(false)
    const [selectedList, setSelectedList] = useState(null)
    const [activeDropdown, setActiveDropdown] = useState(null)
  
    const handleCreateList = (newList) => {
      onBookmarksUpdated?.()
    }
  
    const handleDeleteList = async (listId) => {
      try {
        
        await axiosClient.delete(`/bookmarks/deleteList/${listId}`)
    
        onBookmarksUpdated?.()
    
        if (selectedBookmark?._id === listId) {
          onBookmarkSelect(null)
        }
    
        setShowDeleteModal(false)
      } catch (error) {
        console.error("Failed to delete bookmark list:", error)
        
      }
    }
    
  
    const handleManageProblems = () => {
      onBookmarksUpdated?.()
    }
  
    const handleListClick = (bookmark, e) => {
      e.stopPropagation()
      setSelectedList(bookmark)
      setShowViewModal(true)
    }
  
    const handleCheckboxChange = (bookmark, e) => {
      e.stopPropagation()
      if (selectedBookmark?._id === bookmark._id) {
        onBookmarkSelect(null)
      } else {
        onBookmarkSelect(bookmark)
      }
    }
  
    const handleDropdownToggle = (listId, e) => {
      e.stopPropagation()
      setActiveDropdown(activeDropdown === listId ? null : listId)
    }
  
    const handleManageClick = (bookmark, e) => {
      e.stopPropagation()
      setSelectedList(bookmark)
      setShowManageModal(true)
      setActiveDropdown(null)
    }
  
    const handleDeleteClick = (bookmark, e) => {
      e.stopPropagation()
      setSelectedList(bookmark)
      setShowDeleteModal(true)
      setActiveDropdown(null)
    }
  
    useEffect(() => {
      const handleClickOutside = () => {
        setActiveDropdown(null)
      }
      document.addEventListener("click", handleClickOutside)
      return () => document.removeEventListener("click", handleClickOutside)
    }, [])
  
    if (loading) {
      return (
        <div className="bg-white dark:bg-black rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg p-6">
          <div className="animate-pulse">
            <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-32 mb-4"></div>
            <div className="space-y-2">
              {[1, 2, 3].map((i) => (
                <div key={i} className="h-12 bg-gray-200 dark:bg-gray-700 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      )
    }
  
    return (
      <>
        <div className="bg-white w-90 dark:bg-black rounded-xl border border-black dark:border-white shadow-lg hover:shadow-xl transition-all duration-300 p-6 group hover:-translate-y-1">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-black text-black dark:text-white flex items-center gap-2">
              <Bookmark className="h-5 w-5 text-blue-500" />
              My Bookmarks
            </h3>
            <button
              onClick={() => setShowCreateModal(true)}
              className="p-2 rounded-lg bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 shadow-lg"
            >
              <Plus className="h-4 w-4" />
            </button>
          </div>
  
          <div className="space-y-2">
            {bookmarks?.length > 0 ? (
              bookmarks.map((bookmark, index) => (
                <div
                  key={index}
                  className={`relative flex items-center justify-between p-3 rounded-lg border transition-all duration-200 cursor-pointer ${
                    selectedBookmark?._id === bookmark._id
                      ? "bg-black dark:bg-white text-white dark:text-black border-black dark:border-white shadow-lg"
                      : "bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800"
                  }`}
                >
                  <div
                    className="flex items-center gap-3 flex-1"
                    onClick={(e) => {
                      if (e.target.type !== "checkbox" && !e.target.closest('input[type="checkbox"]')) {
                        handleListClick(bookmark, e)
                      }
                    }}
                  >
                    <input
                      type="checkbox"
                      checked={selectedBookmark?._id === bookmark._id}
                      onChange={(e) => handleCheckboxChange(bookmark, e)}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                    />
                    <div
                      className={`w-8 h-8 rounded-lg flex items-center justify-center ${
                        selectedBookmark?._id === bookmark._id
                          ? "bg-white dark:bg-black"
                          : "bg-white dark:bg-black border border-gray-200 dark:border-gray-700"
                      }`}
                    >
                      <Bookmark
                        className={`h-4 w-4 ${
                          selectedBookmark?._id === bookmark._id ? "text-black dark:text-white" : "text-blue-500"
                        }`}
                      />
                    </div>
                    <div>
                      <h4 className="font-bold text-sm">{bookmark.name}</h4>
                      <p
                        className={`text-xs ${
                          selectedBookmark?._id === bookmark._id
                            ? "text-gray-300 dark:text-gray-600"
                            : "text-gray-500 dark:text-gray-400"
                        }`}
                      >
                        {bookmark.problemIds?.length || 0} problems
                      </p>
                    </div>
                  </div>
  
                  <div className="relative">
                    <button
                      onClick={(e) => handleDropdownToggle(bookmark._id, e)}
                      className={`p-2 rounded-lg transition-all duration-300 ${
                        selectedBookmark?._id === bookmark._id
                          ? "hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-300 dark:text-gray-600"
                          : "hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-400"
                      }`}
                    >
                      <MoreVertical className="h-4 w-4" />
                    </button>
  
                    {activeDropdown === bookmark._id && (
                      <div className="absolute right-0 top-full mt-1 w-48 bg-white dark:bg-black border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl z-50">
                        <button
                          onClick={(e) => handleManageClick(bookmark, e)}
                          className="w-full flex items-center gap-2 px-3 py-2 text-left text-sm text-black dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-t-lg transition-colors duration-200"
                        >
                          <Trash2 className="h-4 w-4 text-orange-500" />
                          Manage Problems
                        </button>
                        <button
                          onClick={(e) => handleDeleteClick(bookmark, e)}
                          className="w-full flex items-center gap-2 px-3 py-2 text-left text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-b-lg transition-colors duration-200"
                        >
                          <Trash2 className="h-4 w-4" />
                          Delete List
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8">
                <Bookmark className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-500 dark:text-gray-400 text-sm">No bookmarks yet</p>
                <button
                  onClick={() => setShowCreateModal(true)}
                  className="mt-2 text-blue-600 dark:text-blue-400 text-sm font-bold hover:underline"
                >
                  Create your first list
                </button>
              </div>
            )}
          </div>
        </div>
  
        <CreateBookmarkListModal
          isOpen={showCreateModal}
          onClose={() => setShowCreateModal(false)}
          onListCreated={handleCreateList}
        />
  
        <DeleteListModal
          isOpen={showDeleteModal}
          onClose={() => setShowDeleteModal(false)}
          list={selectedList}
          onListDeleted={handleDeleteList}
        />
  
        <ManageProblemsModal
          isOpen={showManageModal}
          onClose={() => setShowManageModal(false)}
          list={selectedList}
          onProblemsUpdated={handleManageProblems}
        />
  
        <ViewListProblemsModal isOpen={showViewModal} onClose={() => setShowViewModal(false)} list={selectedList} />
      </>
    )
}
  
const TagChips = ({ problems, onTagSelect, selectedTag }) => {
    const tagCounts = useMemo(() => {
      const counts = {}
      problems?.problemNeeded?.forEach((problem) => {
        const tag = problem.tags
        if (tag) {
          counts[tag] = (counts[tag] || 0) + 1
        }
      })
      return Object.entries(counts).sort((a, b) => b[1] - a[1])
    }, [problems])
  
    return (
      <div className="bg-white w-90 dark:bg-black rounded-xl border border-black dark:border-white shadow-lg hover:shadow-xl transition-all duration-300 p-6 group hover:-translate-y-1">
        <h3 className="text-lg font-black text-black dark:text-white mb-4 flex items-center gap-2">
          <Target className="h-5 w-5 text-purple-500" />
          Problem Tags
        </h3>
  
        <div className="flex flex-wrap gap-2">
          {tagCounts.map(([tag, count]) => (
            <button
              key={tag}
              onClick={() => onTagSelect(tag === selectedTag ? null : tag)}
              className={`inline-flex items-center gap-2 px-3 py-2 rounded-lg text-xs font-bold transition-all duration-300 ${
                selectedTag === tag
                  ? "bg-black dark:bg-white text-white dark:text-black shadow-lg"
                  : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-600"
              }`}
            >
              <span>{tag}</span>
              <span
                className={`px-1.5 py-0.5 rounded-full text-xs ${
                  selectedTag === tag
                    ? "bg-white dark:bg-black text-black dark:text-white"
                    : "bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400"
                }`}
              >
                {count}
              </span>
            </button>
          ))}
        </div>
      </div>
    )
}
  
const StreakModal = ({ isOpen, onClose, userStreak, loading }) => {
    if (!isOpen) return null
  
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
        <div className="bg-white dark:bg-black rounded-2xl border border-gray-200 dark:border-gray-700 shadow-2xl p-8 max-w-md w-full mx-4">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-black text-black dark:text-white flex items-center gap-2">
              <Flame className="h-6 w-6 text-red-500" />
              Your Streak
            </h2>
            <button
              onClick={onClose}
              className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
            >
              <X className="h-5 w-5 text-gray-500 hover:text-black dark:hover:text-white" />
            </button>
          </div>
  
          {loading ? (
            <div className="animate-pulse space-y-4">
              <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded-xl"></div>
              <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded-xl"></div>
            </div>
          ) : (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white dark:bg-black border border-red-200 dark:border-red-800 rounded-xl p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Flame className="h-5 w-5 text-red-500" />
                    <span className="text-sm font-bold text-red-700 dark:text-red-300">Current</span>
                  </div>
                  <div className="text-2xl font-black text-red-800 dark:text-red-200">
                    {userStreak?.currentStreak || 0}
                  </div>
                  <div className="text-xs text-red-600 dark:text-red-400">days</div>
                </div>
  
                <div className="bg-white dark:bg-black border border-yellow-200 dark:border-yellow-800 rounded-xl p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Trophy className="h-5 w-5 text-yellow-500" />
                    <span className="text-sm font-bold text-yellow-700 dark:text-yellow-300">Best</span>
                  </div>
                  <div className="text-2xl font-black text-yellow-800 dark:text-yellow-200">
                    {userStreak?.maxStreak || 0}
                  </div>
                  <div className="text-xs text-yellow-600 dark:text-yellow-400">days</div>
                </div>
              </div>
  
              <div className="bg-gray-50 dark:bg-gray-900 rounded-xl p-4 border border-gray-200 dark:border-gray-700">
                <h3 className="font-bold text-black dark:text-white mb-2">Keep it up!</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Solve at least one problem daily to maintain your streak. Consistency is key to improving your coding
                  skills!
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    )
}

function Homepage() {
  const dispatch = useDispatch()
  const { user, userImage } = useSelector((state) => state.auth)
  const problems = useSelector((state) => state.auth.problemsBySlice)

  const [solvedProblems, setSolvedProblems] = useState([])
  const [userStreak, setUserStreak] = useState(null)
  const [problemOfTheDay, setProblemOfTheDay] = useState(null)
  const [bookmarks, setBookmarks] = useState([])
  const [filters, setFilters] = useState({ difficulty: "all", tag: "all", status: "all" })
  const [searchTerm, setSearchTerm] = useState("")
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)
  const [darkMode, toggleDark] = useState(true)
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [loading, setLoading] = useState(true)
  const [selectedBookmark, setSelectedBookmark] = useState(null)
  const [selectedTag, setSelectedTag] = useState(null)
  const [bookmarkProblems, setBookmarkProblems] = useState([])
  const [showWelcome, setShowWelcome] = useState(false)
  const [isFirstLogin, setIsFirstLogin] = useState(false)
  const [showStreakModal, setShowStreakModal] = useState(false)
  const [showBookmarkModal, setShowBookmarkModal] = useState(false)
  const [selectedProblemForBookmark, setSelectedProblemForBookmark] = useState(null)
  const menuRef = useRef(null)

  useEffect(() => {
    dispatch(getUserImage())
    dispatch(allProblemsFetch())
  }, [dispatch])

  useEffect(() => {
    const fetchSolvedProblems = async () => {
      if (!user) return
      try {
        const { data } = await axiosClient.get("/problem/problemSolvedByUser")
        setSolvedProblems(data)
      } catch (error) {
        console.error("Error fetching solved problems:", error)
      }
    }
    fetchSolvedProblems()
  }, [user])

  useEffect(() => {
    if (user) {
      const hasSeenWelcome = localStorage.getItem(`welcome_seen_${user._id}`)
      const isNewLogin = sessionStorage.getItem(`new_login_${user._id}`)

      if (!hasSeenWelcome && isNewLogin) {
        setIsFirstLogin(true)
        setShowWelcome(true)
        sessionStorage.removeItem(`new_login_${user._id}`)
      }
    }
  }, [user])

  const handleWelcomeComplete = () => {
    setShowWelcome(false)
    if (user) {
      localStorage.setItem(`welcome_seen_${user._id}`, "true")
    }
  }

  const handleBookmarkClick = (problem) => {
    setSelectedProblemForBookmark(problem)
    setShowBookmarkModal(true)
  }

  const handleBookmarkAdded = () => {
    fetchBookmarks()
  }

  const fetchBookmarks = async () => {
    try {
      const bookmarksRes = await axiosClient.get("/bookmarks/getUserBookmarks")
      setBookmarks(bookmarksRes.data)
    } catch (error) {
      console.error("Error fetching bookmarks:", error)
      setBookmarks([])
    }
  }

  useEffect(() => {
    dispatch(allProblemsFetch())
  }, [dispatch])

  useEffect(() => {
    const fetchUserData = async () => {
      if (!user) {
        setLoading(false)
        return
      }

      setLoading(true)
      try {
        const [solvedRes, streakRes, POTD] = await Promise.all([
          axiosClient.get("/problem/problemSolvedByUser"),
          axiosClient.get("/activity/useractivity"),
          axiosClient.get("/problem/problemOfTheDay"),
        ])

        setSolvedProblems(solvedRes.data)
        setUserStreak(streakRes.data)
        setProblemOfTheDay(POTD.data)
        
        await fetchBookmarks()
      } catch (error) {
        console.error("Error fetching user data:", error)
      } finally {
        setLoading(false)
      }
    }

    fetchUserData()
  }, [user])

  useEffect(() => {
    const fetchBookmarkProblems = async () => {
      if (!selectedBookmark?.problemIds?.length) {
        setBookmarkProblems([])
        return
      }

      try {
        const response = await axiosClient.post("/bookmarks/getBookmarkProblems", {
          problemIds: selectedBookmark.problemIds,
        })
        setBookmarkProblems(response.data)
      } catch (error) {
        console.error("Error fetching bookmark problems:", error)
        setBookmarkProblems([])
      }
    }

    fetchBookmarkProblems()
  }, [selectedBookmark])

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setIsMenuOpen(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [])

  useEffect(() => {
    if (darkMode) document.documentElement.classList.add("dark")
    else document.documentElement.classList.remove("dark")
  }, [darkMode])

  const solvedProblemIds = useMemo(() => new Set(solvedProblems.map((p) => p._id)), [solvedProblems])

  const displayProblems = useMemo(() => {
    if (selectedBookmark) {
      return bookmarkProblems
    }
    return problems || []
  }, [selectedBookmark, bookmarkProblems, problems])

  // ### DEBUGGED AND FIXED ###
  const filteredProblems = useMemo(() => {
    // Determine the source array based on whether a bookmark is selected.
    // The main `problems` object has a `problemNeeded` property, 
    // while `bookmarkProblems` is a flat array.
    const sourceArray = selectedBookmark ? displayProblems : displayProblems?.problemNeeded

    // Ensure we have an array to filter, otherwise return an empty array.
    if (!Array.isArray(sourceArray)) {
      return []
    }

    return sourceArray.filter((problem) => {
      const searchMatch = problem.title.toLowerCase().includes(searchTerm.toLowerCase())
      const difficultyMatch = filters.difficulty === "all" || problem.difficulty === filters.difficulty
      const tagMatch = filters.tag === "all" || problem.tags === filters.tag
      const selectedTagMatch = !selectedTag || problem.tags === selectedTag
      const isSolved = solvedProblemIds.has(problem._id)
      const statusMatch =
        filters.status === "all" ||
        (filters.status === "solved" && isSolved) ||
        (filters.status === "unsolved" && !isSolved)
      return searchMatch && difficultyMatch && tagMatch && selectedTagMatch && statusMatch
    })
  }, [displayProblems, selectedBookmark, searchTerm, filters, selectedTag, solvedProblemIds])


  const progress = problems?.length > 0 ? (solvedProblemIds.size / problems.length) * 100 : 0

  const areFiltersActive = useMemo(() => {
    return (
      searchTerm !== "" ||
      filters.difficulty !== "all" ||
      filters.tag !== "all" ||
      filters.status !== "all" ||
      selectedTag !== null ||
      selectedBookmark !== null
    )
  }, [searchTerm, filters, selectedTag, selectedBookmark])

  const handleClearFilters = () => {
    setSearchTerm("")
    setFilters({ difficulty: "all", tag: "all", status: "all" })
    setSelectedTag(null)
    setSelectedBookmark(null)
    setShowAdvancedFilters(false)
  }

  const handleBookmarkSelect = (bookmark) => {
    if (selectedBookmark?._id === bookmark?._id) {
      setSelectedBookmark(null)
    } else {
      setSelectedBookmark(bookmark)
    }
  }

  const handleTagSelect = (tag) => {
    setSelectedTag(tag)
  }

  const getUserInitials = (user) => {
    if (!user) return "U"
    const firstName = user.firstName || ""
    const lastName = user.lastName || ""
    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || user.emailId?.charAt(0).toUpperCase() || "U"
  }

  return (
    <div className="min-h-screen relative text-black dark:text-white transition-colors duration-300">
      <CircuitBoardBackground />
      {showWelcome && isFirstLogin && <WelcomeAnimation user={user} onComplete={handleWelcomeComplete} />}
      <StreakModal
        isOpen={showStreakModal}
        onClose={() => setShowStreakModal(false)}
        userStreak={userStreak}
        loading={loading}
      />
      <BookmarkModal
        isOpen={showBookmarkModal}
        onClose={() => setShowBookmarkModal(false)}
        problem={selectedProblemForBookmark}
        onBookmarkAdded={handleBookmarkAdded}
      />
      <nav className="sticky top-0 z-40 bg-white/90 dark:bg-black/90 backdrop-blur-xl border-b border-gray-200 dark:border-gray-700 shadow-lg">
        <div className="max-w-7xl mx-auto flex items-center justify-between px-6 py-4">
          <NavLink
            to="/"
            className="flex items-center gap-2 px-3 py-2 rounded-xl text-lg font-black text-black dark:text-white transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <div className="p-1.5 rounded-lg bg-black dark:bg-white shadow-lg">
              <Code className="w-5 h-5 text-white dark:text-black" />
            </div>
            CodeArena
          </NavLink>
          <NavLink
            to="/discussionForum"
            className="flex items-center gap-2 px-3 py-2 rounded-xl text-lg font-black text-black dark:text-white transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <div className="p-1.5 rounded-lg bg-black dark:bg-white shadow-lg">
              <Code className="w-5 h-5 text-white dark:text-black" />
            </div>
            Discuss
          </NavLink>
          <NavLink
            to="/contest"
            className="flex items-center gap-2 px-3 py-2 rounded-xl text-lg font-black text-black dark:text-white transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <div className="p-1.5 rounded-lg bg-black dark:bg-white shadow-lg">
              <Code className="w-5 h-5 text-white dark:text-black" />
            </div>
            Contest
          </NavLink>

          <div className="flex items-center gap-3">
            {user && (
              <button
                onClick={() => setShowStreakModal(true)}
                className="flex items-center gap-2 px-3 py-2.5 rounded-xl bg-white dark:bg-black border border-red-200 dark:border-red-800 text-red-700 dark:text-red-300 hover:bg-gray-50 dark:hover:bg-gray-900 transition-all duration-300 font-bold text-sm shadow-lg"
                title="View your streak"
              >
                <Flame className="w-4 h-4 text-red-500" />
                <span className="hidden sm:block">{userStreak?.currentStreak || 0}</span>
              </button>
            )}

            <button
              onClick={() => toggleDark(!darkMode)}
              className="p-2.5 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 group border border-gray-200 dark:border-gray-600"
              title="Toggle theme"
            >
              {darkMode ? (
                <Sun className="w-4 h-4 text-yellow-500 group-hover:rotate-180 transition-transform duration-300" />
              ) : (
                <Moon className="w-4 h-4 text-gray-700 group-hover:rotate-12 transition-transform duration-300" />
              )}
            </button>

            {user ? (
              <div className="relative" ref={menuRef}>
                <button
                  onClick={() => setIsMenuOpen(!isMenuOpen)}
                  className="flex items-center gap-2 p-2.5 rounded-xl bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 font-bold text-sm shadow-lg border border-gray-600 dark:border-gray-400"
                >
                  <div className="w-6 h-6 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white text-xs font-black">
                    {getUserInitials(user)}
                  </div>
                  <span className="hidden sm:block">{user.firstName}</span>
                  <ChevronDown
                    className={`w-3 h-3 transition-transform duration-200 ${isMenuOpen ? "rotate-180" : ""}`}
                  />
                </button>

                {isMenuOpen && (
                  <div className="absolute top-full right-0 mt-2 w-64 bg-white/95 dark:bg-black/95 backdrop-blur-xl border border-gray-200 dark:border-gray-700 rounded-xl shadow-2xl z-50 overflow-hidden">
                    <div className="p-4 border-b border-gray-200 dark:border-gray-700">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white text-lg font-black shadow-lg">
                          {getUserInitials(user)}
                        </div>
                        <div>
                          <p className="font-bold text-black dark:text-white">
                            {user.firstName} {user.lastName}
                          </p>
                          <p className="text-xs text-gray-600 dark:text-gray-400">{user.emailId}</p>
                        </div>
                      </div>
                    </div>
                    <div className="py-1">
                      <Link
                        to="/userDashboard"
                        className="flex items-center gap-3 px-4 py-3 text-black dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 text-sm"
                      >
                        <User className="w-4 h-4" />
                        <span>Dashboard</span>
                        <span className="ml-auto text-xs bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 px-2 py-1 rounded-full font-bold">
                          NEW
                        </span>
                      </Link>
                      {user?.role?.trim().toLowerCase() === "admin" && (
                        <Link
                          to="/adminPanel"
                          className="flex items-center gap-3 px-4 py-3 text-black dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 text-sm"
                        >
                          <Shield className="w-4 h-4" />
                          <span>Admin Panel</span>
                          <span className="ml-auto text-xs bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 px-2 py-1 rounded-full font-bold">
                            ADMIN
                          </span>
                        </Link>
                      )}
                      <button
                        onClick={() => dispatch(logoutUser())}
                        className="flex items-center gap-3 px-4 py-3 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors duration-200 w-full text-left text-sm"
                      >
                        <LogOut className="w-4 h-4" />
                        <span>Logout</span>
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <Link
                to="/login"
                className="px-4 py-2.5 text-sm font-bold rounded-xl bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 shadow-lg border border-gray-600 dark:border-gray-400"
              >
                Login
              </Link>
            )}
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto p-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          <div className="lg:col-span-3 space-y-6">
            {user && <ProblemOfTheDay problem={problemOfTheDay} loading={loading} />}
            <div className="bg-white/95 dark:bg-black/95 backdrop-blur-xl rounded-2xl border border-gray-200 dark:border-gray-700 shadow-xl p-6">
              <TopicFilters activeFilter={filters.tag} onFilterChange={(tag) => setFilters({ ...filters, tag: tag })} />
              <div className="mb-6 flex flex-col gap-4">
                <div className="flex items-center justify-between gap-3">
                  <div className="flex items-center gap-2 flex-1">
                    <div className="relative w-full max-w-sm">
                      <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <Search className="w-4 h-4 text-gray-400" />
                      </div>
                      <input
                        type="text"
                        placeholder="Search problems..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full pl-10 pr-3 py-2.5 rounded-xl bg-gray-50 dark:bg-gray-900 backdrop-blur-sm border border-gray-200 dark:border-gray-700 text-black dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-cyan-400/20 focus:border-blue-500 dark:focus:border-cyan-400 transition-all duration-300 font-medium text-sm"
                      />
                    </div>
                    <button className="flex-shrink-0 p-2.5 rounded-xl bg-gray-100 dark:bg-gray-800 backdrop-blur-sm border border-gray-200 dark:border-gray-700 text-black dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 shadow-lg">
                      <Shuffle className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                      className={`flex-shrink-0 p-2.5 rounded-xl border transition-all duration-300 shadow-lg ${
                        showAdvancedFilters
                          ? "bg-black dark:bg-white text-white dark:text-black border-black dark:border-white"
                          : "bg-gray-100 dark:bg-gray-800 backdrop-blur-sm border-gray-200 dark:border-gray-700 text-black dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700"
                      }`}
                    >
                      <Filter className="w-4 h-4" />
                    </button>
                    {areFiltersActive && (
                      <div className="transition-all duration-300 ease-in-out">
                        <button
                          onClick={handleClearFilters}
                          className="flex-shrink-0 flex items-center gap-1.5 px-3 py-2.5 rounded-xl bg-red-50 dark:bg-red-900/20 backdrop-blur-sm border border-red-200 dark:border-red-800 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40 transition-all duration-300 font-bold text-xs shadow-lg"
                        >
                          <X className="w-3 h-3" />
                          Clear
                        </button>
                      </div>
                    )}
                  </div>
                  {user && (
                    <div className="flex items-center gap-2">
                      <div className="relative">
                        <svg className="w-6 h-6 transform -rotate-90">
                          <circle
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="2"
                            fill="transparent"
                            className="text-gray-200 dark:text-gray-700"
                          />
                          <circle
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="2"
                            fill="transparent"
                            strokeDasharray={`${2 * Math.PI * 10}`}
                            strokeDashoffset={`${2 * Math.PI * 10 * (1 - progress / 100)}`}
                            className="text-green-500 transition-all duration-1000 ease-out"
                            strokeLinecap="round"
                          />
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <Zap className="w-3 h-3 text-black dark:text-white opacity-60" />
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-black text-black dark:text-white">
                          {solvedProblemIds.size}/{problems?.problemNeeded?.length || 0}
                        </div>
                        <div className="text-xs text-gray-500 dark:text-gray-400 font-bold">Solved</div>
                      </div>
                    </div>
                  )}
                </div>
                <div
                  className={`transition-all duration-500 ease-in-out overflow-hidden ${
                    showAdvancedFilters ? "max-h-32 opacity-100" : "max-h-0 opacity-0"
                  }`}
                >
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 border-t border-gray-200 dark:border-gray-700 pt-4">
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <BarChart3 className="w-4 h-4 text-gray-400" />
                      </div>
                      <select
                        className="w-full pl-10 pr-8 py-2.5 rounded-xl bg-gray-50 dark:bg-gray-900 backdrop-blur-sm border border-gray-200 dark:border-gray-700 text-black dark:text-white focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-cyan-400/20 focus:border-blue-500 dark:focus:border-cyan-400 transition-all duration-300 appearance-none font-medium text-sm"
                        value={filters.difficulty}
                        onChange={(e) => setFilters({ ...filters, difficulty: e.target.value })}
                      >
                        <option value="all">All Difficulties</option>
                        <option value="easy">Easy</option>
                        <option value="medium">Medium</option>
                        <option value="hard">Hard</option>
                      </select>
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <ChevronDown className="w-4 h-4 text-gray-400" />
                      </div>
                    </div>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <CheckSquare className="w-4 h-4 text-gray-400" />
                      </div>
                      <select
                        className="w-full pl-10 pr-8 py-2.5 rounded-xl bg-gray-50 dark:bg-gray-900 backdrop-blur-sm border border-gray-200 dark:border-gray-700 text-black dark:text-white focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-cyan-400/20 focus:border-blue-500 dark:focus:border-cyan-400 transition-all duration-300 appearance-none font-medium text-sm"
                        value={filters.status}
                        onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                      >
                        <option value="all">All Status</option>
                        <option value="solved">Solved</option>
                        <option value="unsolved">Unsolved</option>
                      </select>
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <ChevronDown className="w-4 h-4 text-gray-400" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {(selectedBookmark || selectedTag) && (
                <div className="mb-4 flex flex-wrap gap-2">
                  {selectedBookmark && (
                    <div className="flex items-center gap-2 px-3 py-1.5 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg text-sm">
                      <Bookmark className="w-3 h-3 text-blue-600 dark:text-blue-400" />
                      <span className="text-blue-800 dark:text-blue-300 font-bold">
                        Bookmark: {selectedBookmark.name}
                      </span>
                      <button
                        onClick={() => setSelectedBookmark(null)}
                        className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </div>
                  )}
                  {selectedTag && (
                    <div className="flex items-center gap-2 px-3 py-1.5 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg text-sm">
                      <Target className="w-3 h-3 text-purple-600 dark:text-purple-400" />
                      <span className="text-purple-800 dark:text-purple-300 font-bold">Tag: {selectedTag}</span>
                      <button
                        onClick={() => setSelectedTag(null)}
                        className="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-200"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </div>
                  )}
                </div>
              )}

              <div className="flex flex-col gap-3">
                {filteredProblems?.length > 0 ? (
                  filteredProblems.map((problem, index) => (
                    <ProblemCard
                      key={problem._id}
                      problem={problem}
                      isSolved={solvedProblemIds.has(problem._id)}
                      index={index}
                      onBookmarkClick={handleBookmarkClick}
                    />
                  ))
                ) : (
                  <div className="text-center py-12">
                    <div className="w-12 h-12 mx-auto mb-3 rounded-full bg-white dark:bg-black border border-gray-200 dark:border-gray-600 flex items-center justify-center shadow-lg">
                      <Search className="w-6 h-6 text-gray-400" />
                    </div>
                    <h3 className="text-base font-bold text-black dark:text-white mb-1">No problems found</h3>
                    <p className="text-gray-600 dark:text-gray-400 text-sm">
                      Try adjusting your search or filter criteria.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {user && (
            <div className="lg:col-span-1 space-y-6">
              <StreakCalendar userStreak={userStreak} loading={loading} />
              <BookmarkLists
                bookmarks={bookmarks}
                loading={loading}
                onBookmarkSelect={handleBookmarkSelect}
                selectedBookmark={selectedBookmark}
                onBookmarksUpdated={fetchBookmarks}
              />
              <TagChips problems={problems} onTagSelect={handleTagSelect} selectedTag={selectedTag} />
            </div>
          )}
        </div>

        {!user && (
          <div className="bg-white/95 dark:bg-black/95 backdrop-blur-xl rounded-2xl border border-gray-200 dark:border-gray-700 shadow-xl p-8 text-center">
            <h1 className="text-3xl font-black text-black dark:text-white mb-4">Welcome to CodeArena</h1>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              Sign in to track your progress, create bookmarks, and maintain your coding streak!
            </p>
            <Link
              to="/login"
              className="inline-block px-6 py-3 bg-black dark:bg-white text-white dark:text-black rounded-xl font-bold hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300 shadow-lg"
            >
              Get Started
            </Link>
          </div>
        )}
      </main>

      <style jsx>{`
        @keyframes fade-in {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes fade-in-delay {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        .animate-fade-in {
          animation: fade-in 0.5s ease-out;
        }

        .animate-fade-in-delay {
          animation: fade-in-delay 1s ease-out 0.5s both;
        }

        .scrollbar-hide {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }

        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }

        .line-clamp-3 {
          display: -webkit-box;
          -webkit-line-clamp: 3;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
      `}</style>
    </div>
  )
}

export default Homepage
